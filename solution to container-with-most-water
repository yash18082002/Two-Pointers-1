// Time Complexity : O(n)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

// calculate the current area using left and right pointers, then, maintain a maxArea. advance the pointer that has the smaller value.

class Solution {
    public int maxArea(int[] height) {
        if(height == null || height.length == 0) {
            return 0;
        }
        int left = 0;
        int right = height.length - 1;
        int mostWater = 0;
        while(left < right) {
            mostWater = Math.max(mostWater, Math.min(height[left], height[right]) * (right - left));
            if(height[left] <= height[right]) {
                left++;
            } else {
                right--;
            }
        }
        return mostWater;
    }
}
